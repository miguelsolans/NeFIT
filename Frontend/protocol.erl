%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.10.6
-module(protocol).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_Type/1, enum_value_by_symbol_Type/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'Type'() :: 'LOGIN' | 'LOGOUT' | 'REGISTER' | 'RESPONSE' | 'ITEMORDEROFFER' | 'ITEMPRODUCTIONOFFER'.
-export_type(['Type'/0]).

%% message types
-type 'Message'() ::
      #{user_type               => iodata(),        % = 1
        item_order_offer        => 'ItemOrderOffer'(), % = 2
        item_production_offer   => 'ItemProductionOffer'(), % = 3
        user                    => 'User'(),        % = 4
        type                    := 'LOGIN' | 'LOGOUT' | 'REGISTER' | 'RESPONSE' | 'ITEMORDEROFFER' | 'ITEMPRODUCTIONOFFER' | integer(), % = 5, enum Type
        state                   => 'State'()        % = 6
       }.

-type 'ItemOrderOffer'() ::
      #{manufacter_name         := iodata(),        % = 1
        product_name            := iodata(),        % = 2
        quantity                := float() | integer() | infinity | '-infinity' | nan, % = 3
        unit_price              := float() | integer() | infinity | '-infinity' | nan % = 4
       }.

-type 'ItemProductionOffer'() ::
      #{name                    := iodata(),        % = 1
        unit_price              := float() | integer() | infinity | '-infinity' | nan, % = 2
        minimum_amount          := float() | integer() | infinity | '-infinity' | nan, % = 3
        maximum_amount          := float() | integer() | infinity | '-infinity' | nan, % = 4
        period                  := integer(),       % = 5, 32 bits
        manufacturer_name       := iodata()         % = 6
       }.

-type 'User'() ::
      #{username                := iodata(),        % = 1
        password                => iodata()         % = 2
       }.

-type 'State'() ::
      #{result                  => boolean() | 0 | 1, % = 1
        description             => iodata()         % = 2
       }.

-export_type(['Message'/0, 'ItemOrderOffer'/0, 'ItemProductionOffer'/0, 'User'/0, 'State'/0]).

-spec encode_msg('Message'() | 'ItemOrderOffer'() | 'ItemProductionOffer'() | 'User'() | 'State'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('Message'() | 'ItemOrderOffer'() | 'ItemProductionOffer'() | 'User'() | 'State'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Message' ->
	  encode_msg_Message(id(Msg, TrUserData), TrUserData);
      'ItemOrderOffer' ->
	  encode_msg_ItemOrderOffer(id(Msg, TrUserData),
				    TrUserData);
      'ItemProductionOffer' ->
	  encode_msg_ItemProductionOffer(id(Msg, TrUserData),
					 TrUserData);
      'User' ->
	  encode_msg_User(id(Msg, TrUserData), TrUserData);
      'State' ->
	  encode_msg_State(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Message(Msg, TrUserData) ->
    encode_msg_Message(Msg, <<>>, TrUserData).


encode_msg_Message(#{type := F5} = M, Bin,
		   TrUserData) ->
    B1 = case M of
	   #{user_type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{item_order_offer := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_mfield_Message_item_order_offer(TrF2,
						   <<B1/binary, 18>>,
						   TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{item_production_offer := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_mfield_Message_item_production_offer(TrF3,
							<<B2/binary, 26>>,
							TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{user := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_mfield_Message_user(TrF4, <<B3/binary, 34>>,
				       TrUserData)
	       end;
	   _ -> B3
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_enum_Type(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    case M of
      #{state := F6} ->
	  begin
	    TrF6 = id(F6, TrUserData),
	    e_mfield_Message_state(TrF6, <<B5/binary, 50>>,
				   TrUserData)
	  end;
      _ -> B5
    end.

encode_msg_ItemOrderOffer(Msg, TrUserData) ->
    encode_msg_ItemOrderOffer(Msg, <<>>, TrUserData).


encode_msg_ItemOrderOffer(#{manufacter_name := F1,
			    product_name := F2, quantity := F3,
			    unit_price := F4},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
    end.

encode_msg_ItemProductionOffer(Msg, TrUserData) ->
    encode_msg_ItemProductionOffer(Msg, <<>>, TrUserData).


encode_msg_ItemProductionOffer(#{name := F1,
				 unit_price := F2, minimum_amount := F3,
				 maximum_amount := F4, period := F5,
				 manufacturer_name := F6},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
    end.

encode_msg_User(Msg, TrUserData) ->
    encode_msg_User(Msg, <<>>, TrUserData).


encode_msg_User(#{username := F1} = M, Bin,
		TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    case M of
      #{password := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_State(Msg, TrUserData) ->
    encode_msg_State(Msg, <<>>, TrUserData).


encode_msg_State(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{result := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{description := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	  end;
      _ -> B1
    end.

e_mfield_Message_item_order_offer(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_ItemOrderOffer(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_item_production_offer(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_ItemProductionOffer(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_user(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_User(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_state(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_State(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_Type('LOGIN', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_Type('LOGOUT', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_Type('REGISTER', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_Type('RESPONSE', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_Type('ITEMORDEROFFER', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
e_enum_Type('ITEMPRODUCTIONOFFER', Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
e_enum_Type(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Message', Bin, TrUserData) ->
    id(decode_msg_Message(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ItemOrderOffer', Bin, TrUserData) ->
    id(decode_msg_ItemOrderOffer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ItemProductionOffer', Bin,
		  TrUserData) ->
    id(decode_msg_ItemProductionOffer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('User', Bin, TrUserData) ->
    id(decode_msg_User(Bin, TrUserData), TrUserData);
decode_msg_2_doit('State', Bin, TrUserData) ->
    id(decode_msg_State(Bin, TrUserData), TrUserData).



decode_msg_Message(Bin, TrUserData) ->
    dfp_read_field_def_Message(Bin, 0, 0,
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Message(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Message_user_type(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Message(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Message_item_order_offer(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Message(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Message_item_production_offer(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
dfp_read_field_def_Message(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Message_user(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Message(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Message_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Message(<<50, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Message_state(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, _) ->
    S1 = #{type => F@_5},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{user_type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{item_order_offer => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{item_production_offer => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{user => F@_4}
	 end,
    if F@_6 == '$undef' -> S5;
       true -> S5#{state => F@_6}
    end;
dfp_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Message_user_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, TrUserData);
      18 ->
	  d_field_Message_item_order_offer(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, TrUserData);
      26 ->
	  d_field_Message_item_production_offer(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						TrUserData);
      34 ->
	  d_field_Message_user(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, TrUserData);
      40 ->
	  d_field_Message_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, TrUserData);
      50 ->
	  d_field_Message_state(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_Message(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6,
					      TrUserData);
	    3 ->
		skip_group_Message(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, _) ->
    S1 = #{type => F@_5},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{user_type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{item_order_offer => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{item_production_offer => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{user => F@_4}
	 end,
    if F@_6 == '$undef' -> S5;
       true -> S5#{state => F@_6}
    end.

d_field_Message_user_type(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_Message_user_type(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Message_user_type(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_Message_item_order_offer(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 57 ->
    d_field_Message_item_order_offer(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
d_field_Message_item_order_offer(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ItemOrderOffer(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_ItemOrderOffer(Prev, NewFValue,
							       TrUserData)
			       end,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_Message_item_production_offer(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 57 ->
    d_field_Message_item_production_offer(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
d_field_Message_item_production_offer(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
				      F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ItemProductionOffer(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_ItemProductionOffer(Prev,
								    NewFValue,
								    TrUserData)
			       end,
			       F@_4, F@_5, F@_6, TrUserData).

d_field_Message_user(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_Message_user(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Message_user(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, Prev, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_User(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_User(Prev, NewFValue,
						     TrUserData)
			       end,
			       F@_5, F@_6, TrUserData).

d_field_Message_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_Message_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Message_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Type(begin
					   <<Res:32/signed-native>> = <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
					   id(Res, TrUserData)
					 end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_Message_state(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_Message_state(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Message_state(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_State(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_State(Prev, NewFValue,
						      TrUserData)
			       end,
			       TrUserData).

skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_Message(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_Message(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_Message(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_ItemOrderOffer(Bin, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Bin, 0, 0,
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ItemOrderOffer(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ItemOrderOffer_manufacter_name(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ItemOrderOffer(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ItemOrderOffer_product_name(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ItemOrderOffer(<<29, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ItemOrderOffer_quantity(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ItemOrderOffer(<<37, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ItemOrderOffer_unit_price(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ItemOrderOffer(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, _) ->
    #{manufacter_name => F@_1, product_name => F@_2,
      quantity => F@_3, unit_price => F@_4};
dfp_read_field_def_ItemOrderOffer(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_ItemOrderOffer(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_ItemOrderOffer(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ItemOrderOffer(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
dg_read_field_def_ItemOrderOffer(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ItemOrderOffer_manufacter_name(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
      18 ->
	  d_field_ItemOrderOffer_product_name(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
      29 ->
	  d_field_ItemOrderOffer_quantity(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      37 ->
	  d_field_ItemOrderOffer_unit_price(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ItemOrderOffer(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    1 ->
		skip_64_ItemOrderOffer(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    2 ->
		skip_length_delimited_ItemOrderOffer(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
	    3 ->
		skip_group_ItemOrderOffer(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_ItemOrderOffer(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData)
	  end
    end;
dg_read_field_def_ItemOrderOffer(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, _) ->
    #{manufacter_name => F@_1, product_name => F@_2,
      quantity => F@_3, unit_price => F@_4}.

d_field_ItemOrderOffer_manufacter_name(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData)
    when N < 57 ->
    d_field_ItemOrderOffer_manufacter_name(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
d_field_ItemOrderOffer_manufacter_name(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, F@_4,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ItemOrderOffer(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_ItemOrderOffer_product_name(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ItemOrderOffer_product_name(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
d_field_ItemOrderOffer_product_name(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ItemOrderOffer(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, TrUserData).

d_field_ItemOrderOffer_quantity(<<0:16, 128, 127,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, id(infinity, TrUserData), F@_4,
				      TrUserData);
d_field_ItemOrderOffer_quantity(<<0:16, 128, 255,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, id('-infinity', TrUserData), F@_4,
				      TrUserData);
d_field_ItemOrderOffer_quantity(<<_:16, 1:1, _:7, _:1,
				  127:7, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, id(nan, TrUserData), F@_4,
				      TrUserData);
d_field_ItemOrderOffer_quantity(<<Value:32/little-float,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, id(Value, TrUserData), F@_4,
				      TrUserData).

d_field_ItemOrderOffer_unit_price(<<0:16, 128, 127,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, id(infinity, TrUserData),
				      TrUserData);
d_field_ItemOrderOffer_unit_price(<<0:16, 128, 255,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, id('-infinity', TrUserData),
				      TrUserData);
d_field_ItemOrderOffer_unit_price(<<_:16, 1:1, _:7, _:1,
				    127:7, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, id(nan, TrUserData),
				      TrUserData);
d_field_ItemOrderOffer_unit_price(<<Value:32/little-float,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, id(Value, TrUserData),
				      TrUserData).

skip_varint_ItemOrderOffer(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_ItemOrderOffer(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
skip_varint_ItemOrderOffer(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_ItemOrderOffer(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_ItemOrderOffer(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
skip_length_delimited_ItemOrderOffer(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ItemOrderOffer(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_group_ItemOrderOffer(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ItemOrderOffer(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_32_ItemOrderOffer(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_64_ItemOrderOffer(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ItemOrderOffer(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

decode_msg_ItemProductionOffer(Bin, TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Bin, 0, 0,
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   TrUserData).

dfp_read_field_def_ItemProductionOffer(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_ItemProductionOffer_name(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_ItemProductionOffer(<<21,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_ItemProductionOffer_unit_price(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData);
dfp_read_field_def_ItemProductionOffer(<<29,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_ItemProductionOffer_minimum_amount(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData);
dfp_read_field_def_ItemProductionOffer(<<37,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_ItemProductionOffer_maximum_amount(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData);
dfp_read_field_def_ItemProductionOffer(<<40,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_ItemProductionOffer_period(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData);
dfp_read_field_def_ItemProductionOffer(<<50,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_ItemProductionOffer_manufacturer_name(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, TrUserData);
dfp_read_field_def_ItemProductionOffer(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #{name => F@_1, unit_price => F@_2,
      minimum_amount => F@_3, maximum_amount => F@_4,
      period => F@_5, manufacturer_name => F@_6};
dfp_read_field_def_ItemProductionOffer(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData) ->
    dg_read_field_def_ItemProductionOffer(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

dg_read_field_def_ItemProductionOffer(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ItemProductionOffer(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
dg_read_field_def_ItemProductionOffer(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ItemProductionOffer_name(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, TrUserData);
      21 ->
	  d_field_ItemProductionOffer_unit_price(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
      29 ->
	  d_field_ItemProductionOffer_minimum_amount(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, TrUserData);
      37 ->
	  d_field_ItemProductionOffer_maximum_amount(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, TrUserData);
      40 ->
	  d_field_ItemProductionOffer_period(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
      50 ->
	  d_field_ItemProductionOffer_manufacturer_name(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6,
							TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ItemProductionOffer(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6,
						TrUserData);
	    1 ->
		skip_64_ItemProductionOffer(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_ItemProductionOffer(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  TrUserData);
	    3 ->
		skip_group_ItemProductionOffer(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       TrUserData);
	    5 ->
		skip_32_ItemProductionOffer(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_ItemProductionOffer(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #{name => F@_1, unit_price => F@_2,
      minimum_amount => F@_3, maximum_amount => F@_4,
      period => F@_5, manufacturer_name => F@_6}.

d_field_ItemProductionOffer_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 57 ->
    d_field_ItemProductionOffer_name(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
d_field_ItemProductionOffer_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ItemProductionOffer(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData).

d_field_ItemProductionOffer_unit_price(<<0:16, 128, 127,
					 Rest/binary>>,
				       Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				       TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, id(infinity, TrUserData), F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
d_field_ItemProductionOffer_unit_price(<<0:16, 128, 255,
					 Rest/binary>>,
				       Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				       TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, id('-infinity', TrUserData),
					   F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_ItemProductionOffer_unit_price(<<_:16, 1:1, _:7,
					 _:1, 127:7, Rest/binary>>,
				       Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				       TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, id(nan, TrUserData), F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
d_field_ItemProductionOffer_unit_price(<<Value:32/little-float,
					 Rest/binary>>,
				       Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				       TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, id(Value, TrUserData), F@_3,
					   F@_4, F@_5, F@_6, TrUserData).

d_field_ItemProductionOffer_minimum_amount(<<0:16, 128,
					     127, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					   F@_6, TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2, id(infinity, TrUserData),
					   F@_4, F@_5, F@_6, TrUserData);
d_field_ItemProductionOffer_minimum_amount(<<0:16, 128,
					     255, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					   F@_6, TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2,
					   id('-infinity', TrUserData), F@_4,
					   F@_5, F@_6, TrUserData);
d_field_ItemProductionOffer_minimum_amount(<<_:16, 1:1,
					     _:7, _:1, 127:7, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					   F@_6, TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2, id(nan, TrUserData),
					   F@_4, F@_5, F@_6, TrUserData);
d_field_ItemProductionOffer_minimum_amount(<<Value:32/little-float,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					   F@_6, TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2, id(Value, TrUserData),
					   F@_4, F@_5, F@_6, TrUserData).

d_field_ItemProductionOffer_maximum_amount(<<0:16, 128,
					     127, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					   F@_6, TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3,
					   id(infinity, TrUserData), F@_5, F@_6,
					   TrUserData);
d_field_ItemProductionOffer_maximum_amount(<<0:16, 128,
					     255, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					   F@_6, TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3,
					   id('-infinity', TrUserData), F@_5,
					   F@_6, TrUserData);
d_field_ItemProductionOffer_maximum_amount(<<_:16, 1:1,
					     _:7, _:1, 127:7, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					   F@_6, TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3,
					   id(nan, TrUserData), F@_5, F@_6,
					   TrUserData);
d_field_ItemProductionOffer_maximum_amount(<<Value:32/little-float,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					   F@_6, TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3,
					   id(Value, TrUserData), F@_5, F@_6,
					   TrUserData).

d_field_ItemProductionOffer_period(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 57 ->
    d_field_ItemProductionOffer_period(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
d_field_ItemProductionOffer_period(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ItemProductionOffer(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, NewFValue,
					   F@_6, TrUserData).

d_field_ItemProductionOffer_manufacturer_name(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ItemProductionOffer_manufacturer_name(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  TrUserData);
d_field_ItemProductionOffer_manufacturer_name(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ItemProductionOffer(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   NewFValue, TrUserData).

skip_varint_ItemProductionOffer(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    skip_varint_ItemProductionOffer(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_ItemProductionOffer(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData).

skip_length_delimited_ItemProductionOffer(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 57 ->
    skip_length_delimited_ItemProductionOffer(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_ItemProductionOffer(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ItemProductionOffer(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData).

skip_group_ItemProductionOffer(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ItemProductionOffer(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData).

skip_32_ItemProductionOffer(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData).

skip_64_ItemProductionOffer(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    dfp_read_field_def_ItemProductionOffer(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData).

decode_msg_User(Bin, TrUserData) ->
    dfp_read_field_def_User(Bin, 0, 0,
			    id('$undef', TrUserData), id('$undef', TrUserData),
			    TrUserData).

dfp_read_field_def_User(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_User_username(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_User(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_User_password(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_User(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{username => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{password => F@_2}
    end;
dfp_read_field_def_User(Other, Z1, Z2, F@_1, F@_2,
			TrUserData) ->
    dg_read_field_def_User(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData).

dg_read_field_def_User(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_User(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
dg_read_field_def_User(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_User_username(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_User_password(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_User(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_User(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_User(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    3 ->
		skip_group_User(Rest, Key bsr 3, 0, F@_1, F@_2,
				TrUserData);
	    5 -> skip_32_User(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_User(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{username => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{password => F@_2}
    end.

d_field_User_username(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_User_username(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_User_username(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_User(RestF, 0, 0, NewFValue, F@_2,
			    TrUserData).

d_field_User_password(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_User_password(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_User_password(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_User(RestF, 0, 0, F@_1, NewFValue,
			    TrUserData).

skip_varint_User(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    skip_varint_User(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_User(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_length_delimited_User(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_User(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
skip_length_delimited_User(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_User(Rest2, 0, 0, F@_1, F@_2,
			    TrUserData).

skip_group_User(Bin, FNum, Z2, F@_1, F@_2,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_User(Rest, 0, Z2, F@_1, F@_2,
			    TrUserData).

skip_32_User(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_64_User(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

decode_msg_State(Bin, TrUserData) ->
    dfp_read_field_def_State(Bin, 0, 0,
			     id('$undef', TrUserData), id('$undef', TrUserData),
			     TrUserData).

dfp_read_field_def_State(<<8, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_State_result(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_State(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_State_description(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_State(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{result => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{description => F@_2}
    end;
dfp_read_field_def_State(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_State(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_State(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_State(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_State(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_State_result(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      18 ->
	  d_field_State_description(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_State(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_State(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_State(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_State(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_State(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_State(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{result => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{description => F@_2}
    end.

d_field_State_result(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_State_result(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_State_result(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_State(RestF, 0, 0, NewFValue, F@_2,
			     TrUserData).

d_field_State_description(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_State_description(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_State_description(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_State(RestF, 0, 0, F@_1, NewFValue,
			     TrUserData).

skip_varint_State(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_State(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_State(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_State(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_State(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_State(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_State(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_State(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_State(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_State(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_State(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_State(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_State(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_State(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

d_enum_Type(0) -> 'LOGIN';
d_enum_Type(1) -> 'LOGOUT';
d_enum_Type(2) -> 'REGISTER';
d_enum_Type(3) -> 'RESPONSE';
d_enum_Type(4) -> 'ITEMORDEROFFER';
d_enum_Type(5) -> 'ITEMPRODUCTIONOFFER';
d_enum_Type(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Message' -> merge_msg_Message(Prev, New, TrUserData);
      'ItemOrderOffer' ->
	  merge_msg_ItemOrderOffer(Prev, New, TrUserData);
      'ItemProductionOffer' ->
	  merge_msg_ItemProductionOffer(Prev, New, TrUserData);
      'User' -> merge_msg_User(Prev, New, TrUserData);
      'State' -> merge_msg_State(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Message/3}).
merge_msg_Message(#{} = PMsg, #{type := NFtype} = NMsg,
		  TrUserData) ->
    S1 = #{type => NFtype},
    S2 = case {PMsg, NMsg} of
	   {_, #{user_type := NFuser_type}} ->
	       S1#{user_type => NFuser_type};
	   {#{user_type := PFuser_type}, _} ->
	       S1#{user_type => PFuser_type};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{item_order_offer := PFitem_order_offer},
	    #{item_order_offer := NFitem_order_offer}} ->
	       S2#{item_order_offer =>
		       merge_msg_ItemOrderOffer(PFitem_order_offer,
						NFitem_order_offer,
						TrUserData)};
	   {_, #{item_order_offer := NFitem_order_offer}} ->
	       S2#{item_order_offer => NFitem_order_offer};
	   {#{item_order_offer := PFitem_order_offer}, _} ->
	       S2#{item_order_offer => PFitem_order_offer};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{item_production_offer := PFitem_production_offer},
	    #{item_production_offer := NFitem_production_offer}} ->
	       S3#{item_production_offer =>
		       merge_msg_ItemProductionOffer(PFitem_production_offer,
						     NFitem_production_offer,
						     TrUserData)};
	   {_,
	    #{item_production_offer := NFitem_production_offer}} ->
	       S3#{item_production_offer => NFitem_production_offer};
	   {#{item_production_offer := PFitem_production_offer},
	    _} ->
	       S3#{item_production_offer => PFitem_production_offer};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {#{user := PFuser}, #{user := NFuser}} ->
	       S4#{user => merge_msg_User(PFuser, NFuser, TrUserData)};
	   {_, #{user := NFuser}} -> S4#{user => NFuser};
	   {#{user := PFuser}, _} -> S4#{user => PFuser};
	   {_, _} -> S4
	 end,
    case {PMsg, NMsg} of
      {#{state := PFstate}, #{state := NFstate}} ->
	  S5#{state =>
		  merge_msg_State(PFstate, NFstate, TrUserData)};
      {_, #{state := NFstate}} -> S5#{state => NFstate};
      {#{state := PFstate}, _} -> S5#{state => PFstate};
      {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_ItemOrderOffer/3}).
merge_msg_ItemOrderOffer(#{},
			 #{manufacter_name := NFmanufacter_name,
			   product_name := NFproduct_name,
			   quantity := NFquantity, unit_price := NFunit_price},
			 _) ->
    #{manufacter_name => NFmanufacter_name,
      product_name => NFproduct_name, quantity => NFquantity,
      unit_price => NFunit_price}.

-compile({nowarn_unused_function,merge_msg_ItemProductionOffer/3}).
merge_msg_ItemProductionOffer(#{},
			      #{name := NFname, unit_price := NFunit_price,
				minimum_amount := NFminimum_amount,
				maximum_amount := NFmaximum_amount,
				period := NFperiod,
				manufacturer_name := NFmanufacturer_name},
			      _) ->
    #{name => NFname, unit_price => NFunit_price,
      minimum_amount => NFminimum_amount,
      maximum_amount => NFmaximum_amount, period => NFperiod,
      manufacturer_name => NFmanufacturer_name}.

-compile({nowarn_unused_function,merge_msg_User/3}).
merge_msg_User(#{} = PMsg,
	       #{username := NFusername} = NMsg, _) ->
    S1 = #{username => NFusername},
    case {PMsg, NMsg} of
      {_, #{password := NFpassword}} ->
	  S1#{password => NFpassword};
      {#{password := PFpassword}, _} ->
	  S1#{password => PFpassword};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_State/3}).
merge_msg_State(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{result := NFresult}} -> S1#{result => NFresult};
	   {#{result := PFresult}, _} -> S1#{result => PFresult};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{description := NFdescription}} ->
	  S2#{description => NFdescription};
      {#{description := PFdescription}, _} ->
	  S2#{description => PFdescription};
      _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Message' -> v_msg_Message(Msg, [MsgName], TrUserData);
      'ItemOrderOffer' ->
	  v_msg_ItemOrderOffer(Msg, [MsgName], TrUserData);
      'ItemProductionOffer' ->
	  v_msg_ItemProductionOffer(Msg, [MsgName], TrUserData);
      'User' -> v_msg_User(Msg, [MsgName], TrUserData);
      'State' -> v_msg_State(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Message/3}).
-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#{type := F5} = M, Path, TrUserData) ->
    case M of
      #{user_type := F1} ->
	  v_type_string(F1, [user_type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{item_order_offer := F2} ->
	  v_msg_ItemOrderOffer(F2, [item_order_offer | Path],
			       TrUserData);
      _ -> ok
    end,
    case M of
      #{item_production_offer := F3} ->
	  v_msg_ItemProductionOffer(F3,
				    [item_production_offer | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{user := F4} ->
	  v_msg_User(F4, [user | Path], TrUserData);
      _ -> ok
    end,
    v_enum_Type(F5, [type | Path], TrUserData),
    case M of
      #{state := F6} ->
	  v_msg_State(F6, [state | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (user_type) -> ok;
		      (item_order_offer) -> ok;
		      (item_production_offer) -> ok;
		      (user) -> ok;
		      (type) -> ok;
		      (state) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Message(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [type] -- maps:keys(M),
		   'Message'},
		  M, Path);
v_msg_Message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Message'}, X, Path).

-compile({nowarn_unused_function,v_msg_ItemOrderOffer/3}).
-dialyzer({nowarn_function,v_msg_ItemOrderOffer/3}).
v_msg_ItemOrderOffer(#{manufacter_name := F1,
		       product_name := F2, quantity := F3, unit_price := F4} =
			 M,
		     Path, TrUserData) ->
    v_type_string(F1, [manufacter_name | Path], TrUserData),
    v_type_string(F2, [product_name | Path], TrUserData),
    v_type_float(F3, [quantity | Path], TrUserData),
    v_type_float(F4, [unit_price | Path], TrUserData),
    lists:foreach(fun (manufacter_name) -> ok;
		      (product_name) -> ok;
		      (quantity) -> ok;
		      (unit_price) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ItemOrderOffer(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [manufacter_name, product_name, quantity, unit_price] --
		     maps:keys(M),
		   'ItemOrderOffer'},
		  M, Path);
v_msg_ItemOrderOffer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ItemOrderOffer'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ItemProductionOffer/3}).
-dialyzer({nowarn_function,v_msg_ItemProductionOffer/3}).
v_msg_ItemProductionOffer(#{name := F1,
			    unit_price := F2, minimum_amount := F3,
			    maximum_amount := F4, period := F5,
			    manufacturer_name := F6} =
			      M,
			  Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    v_type_float(F2, [unit_price | Path], TrUserData),
    v_type_float(F3, [minimum_amount | Path], TrUserData),
    v_type_float(F4, [maximum_amount | Path], TrUserData),
    v_type_int64(F5, [period | Path], TrUserData),
    v_type_string(F6, [manufacturer_name | Path],
		  TrUserData),
    lists:foreach(fun (name) -> ok;
		      (unit_price) -> ok;
		      (minimum_amount) -> ok;
		      (maximum_amount) -> ok;
		      (period) -> ok;
		      (manufacturer_name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ItemProductionOffer(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [name, unit_price, minimum_amount, maximum_amount,
		    period, manufacturer_name]
		     -- maps:keys(M),
		   'ItemProductionOffer'},
		  M, Path);
v_msg_ItemProductionOffer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ItemProductionOffer'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_User/3}).
-dialyzer({nowarn_function,v_msg_User/3}).
v_msg_User(#{username := F1} = M, Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    case M of
      #{password := F2} ->
	  v_type_string(F2, [password | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
		      (password) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_User(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [username] -- maps:keys(M), 'User'},
		  M, Path);
v_msg_User(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User'}, X, Path).

-compile({nowarn_unused_function,v_msg_State/3}).
-dialyzer({nowarn_function,v_msg_State/3}).
v_msg_State(#{} = M, Path, TrUserData) ->
    case M of
      #{result := F1} ->
	  v_type_bool(F1, [result | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{description := F2} ->
	  v_type_string(F2, [description | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (result) -> ok;
		      (description) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_State(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'State'},
		  M, Path);
v_msg_State(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'State'}, X, Path).

-compile({nowarn_unused_function,v_enum_Type/3}).
-dialyzer({nowarn_function,v_enum_Type/3}).
v_enum_Type('LOGIN', _Path, _TrUserData) -> ok;
v_enum_Type('LOGOUT', _Path, _TrUserData) -> ok;
v_enum_Type('REGISTER', _Path, _TrUserData) -> ok;
v_enum_Type('RESPONSE', _Path, _TrUserData) -> ok;
v_enum_Type('ITEMORDEROFFER', _Path, _TrUserData) -> ok;
v_enum_Type('ITEMPRODUCTIONOFFER', _Path,
	    _TrUserData) ->
    ok;
v_enum_Type(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_Type(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Type'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'Type'},
      [{'LOGIN', 0}, {'LOGOUT', 1}, {'REGISTER', 2},
       {'RESPONSE', 3}, {'ITEMORDEROFFER', 4},
       {'ITEMPRODUCTIONOFFER', 5}]},
     {{msg, 'Message'},
      [#{name => user_type, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => item_order_offer, fnum => 2, rnum => 3,
	 type => {msg, 'ItemOrderOffer'}, occurrence => optional,
	 opts => []},
       #{name => item_production_offer, fnum => 3, rnum => 4,
	 type => {msg, 'ItemProductionOffer'},
	 occurrence => optional, opts => []},
       #{name => user, fnum => 4, rnum => 5,
	 type => {msg, 'User'}, occurrence => optional,
	 opts => []},
       #{name => type, fnum => 5, rnum => 6,
	 type => {enum, 'Type'}, occurrence => required,
	 opts => []},
       #{name => state, fnum => 6, rnum => 7,
	 type => {msg, 'State'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'ItemOrderOffer'},
      [#{name => manufacter_name, fnum => 1, rnum => 2,
	 type => string, occurrence => required, opts => []},
       #{name => product_name, fnum => 2, rnum => 3,
	 type => string, occurrence => required, opts => []},
       #{name => quantity, fnum => 3, rnum => 4, type => float,
	 occurrence => required, opts => []},
       #{name => unit_price, fnum => 4, rnum => 5,
	 type => float, occurrence => required, opts => []}]},
     {{msg, 'ItemProductionOffer'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => required, opts => []},
       #{name => unit_price, fnum => 2, rnum => 3,
	 type => float, occurrence => required, opts => []},
       #{name => minimum_amount, fnum => 3, rnum => 4,
	 type => float, occurrence => required, opts => []},
       #{name => maximum_amount, fnum => 4, rnum => 5,
	 type => float, occurrence => required, opts => []},
       #{name => period, fnum => 5, rnum => 6, type => int64,
	 occurrence => required, opts => []},
       #{name => manufacturer_name, fnum => 6, rnum => 7,
	 type => string, occurrence => required, opts => []}]},
     {{msg, 'User'},
      [#{name => username, fnum => 1, rnum => 2,
	 type => string, occurrence => required, opts => []},
       #{name => password, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'State'},
      [#{name => result, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => description, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]}].


get_msg_names() ->
    ['Message', 'ItemOrderOffer', 'ItemProductionOffer',
     'User', 'State'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Message', 'ItemOrderOffer', 'ItemProductionOffer',
     'User', 'State'].


get_enum_names() -> ['Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Message') ->
    [#{name => user_type, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => item_order_offer, fnum => 2, rnum => 3,
       type => {msg, 'ItemOrderOffer'}, occurrence => optional,
       opts => []},
     #{name => item_production_offer, fnum => 3, rnum => 4,
       type => {msg, 'ItemProductionOffer'},
       occurrence => optional, opts => []},
     #{name => user, fnum => 4, rnum => 5,
       type => {msg, 'User'}, occurrence => optional,
       opts => []},
     #{name => type, fnum => 5, rnum => 6,
       type => {enum, 'Type'}, occurrence => required,
       opts => []},
     #{name => state, fnum => 6, rnum => 7,
       type => {msg, 'State'}, occurrence => optional,
       opts => []}];
find_msg_def('ItemOrderOffer') ->
    [#{name => manufacter_name, fnum => 1, rnum => 2,
       type => string, occurrence => required, opts => []},
     #{name => product_name, fnum => 2, rnum => 3,
       type => string, occurrence => required, opts => []},
     #{name => quantity, fnum => 3, rnum => 4, type => float,
       occurrence => required, opts => []},
     #{name => unit_price, fnum => 4, rnum => 5,
       type => float, occurrence => required, opts => []}];
find_msg_def('ItemProductionOffer') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => required, opts => []},
     #{name => unit_price, fnum => 2, rnum => 3,
       type => float, occurrence => required, opts => []},
     #{name => minimum_amount, fnum => 3, rnum => 4,
       type => float, occurrence => required, opts => []},
     #{name => maximum_amount, fnum => 4, rnum => 5,
       type => float, occurrence => required, opts => []},
     #{name => period, fnum => 5, rnum => 6, type => int64,
       occurrence => required, opts => []},
     #{name => manufacturer_name, fnum => 6, rnum => 7,
       type => string, occurrence => required, opts => []}];
find_msg_def('User') ->
    [#{name => username, fnum => 1, rnum => 2,
       type => string, occurrence => required, opts => []},
     #{name => password, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('State') ->
    [#{name => result, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => description, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('Type') ->
    [{'LOGIN', 0}, {'LOGOUT', 1}, {'REGISTER', 2},
     {'RESPONSE', 3}, {'ITEMORDEROFFER', 4},
     {'ITEMPRODUCTIONOFFER', 5}];
find_enum_def(_) -> error.


enum_symbol_by_value('Type', Value) ->
    enum_symbol_by_value_Type(Value).


enum_value_by_symbol('Type', Sym) ->
    enum_value_by_symbol_Type(Sym).


enum_symbol_by_value_Type(0) -> 'LOGIN';
enum_symbol_by_value_Type(1) -> 'LOGOUT';
enum_symbol_by_value_Type(2) -> 'REGISTER';
enum_symbol_by_value_Type(3) -> 'RESPONSE';
enum_symbol_by_value_Type(4) -> 'ITEMORDEROFFER';
enum_symbol_by_value_Type(5) -> 'ITEMPRODUCTIONOFFER'.


enum_value_by_symbol_Type('LOGIN') -> 0;
enum_value_by_symbol_Type('LOGOUT') -> 1;
enum_value_by_symbol_Type('REGISTER') -> 2;
enum_value_by_symbol_Type('RESPONSE') -> 3;
enum_value_by_symbol_Type('ITEMORDEROFFER') -> 4;
enum_value_by_symbol_Type('ITEMPRODUCTIONOFFER') -> 5.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"Protos.Message">>) -> 'Message';
fqbin_to_msg_name(<<"Protos.ItemOrderOffer">>) -> 'ItemOrderOffer';
fqbin_to_msg_name(<<"Protos.ItemProductionOffer">>) -> 'ItemProductionOffer';
fqbin_to_msg_name(<<"Protos.User">>) -> 'User';
fqbin_to_msg_name(<<"Protos.State">>) -> 'State';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Message') -> <<"Protos.Message">>;
msg_name_to_fqbin('ItemOrderOffer') -> <<"Protos.ItemOrderOffer">>;
msg_name_to_fqbin('ItemProductionOffer') -> <<"Protos.ItemProductionOffer">>;
msg_name_to_fqbin('User') -> <<"Protos.User">>;
msg_name_to_fqbin('State') -> <<"Protos.State">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"Protos.Type">>) -> 'Type';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('Type') -> <<"Protos.Type">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'Protos'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "protocol.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["protocol.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["protocol"].


get_msg_containment("protocol") ->
    ['ItemOrderOffer', 'ItemProductionOffer', 'Message',
     'State', 'User'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("protocol") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("protocol") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("protocol") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("protocol") -> ['Type'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"Protos.User">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"Protos.ItemProductionOffer">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"Protos.ItemOrderOffer">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"Protos.State">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"Protos.Message">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"Protos.Type">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.10.6".

gpb_version_as_list() ->
    [4,10,6].
